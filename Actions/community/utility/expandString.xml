<?xml version='1.0' encoding='UTF-8'?>
<dunes-script-module name="expandString" result-type="string" api-version="6.0.0" id="14efe3f2-9d86-46b7-ba24-a2cc16c54a25" version="0.0.2" category-name="community.utility">
  <description><![CDATA[Scan a string for variable references and expand them to their values.]]></description>
  <param n="inputString" t="string"><![CDATA[String to be expanded]]></param>
  <param n="prop1" t="Properties"><![CDATA[Primary source of variables]]></param>
  <param n="prop2" t="Properties"><![CDATA[Optional secondary source of variables]]></param>
  <script encoded="false"><![CDATA[/*
All codes are used at your own risk.  We take no responsibility for any unexpected side effects.
We do ask that, should you find an error, please report it so that we can fix it for others or 
join the community to assist in the correction.

Licensing is under GPL, which can be found at https://www.gnu.org/licenses/gpl-3.0.en.html

*/
/*
Version Date    Developer
    Description of change

0.0.2 Dec 23, 2021    Carl Linkletter
    Initial
*/


/*
Usage documentation

The goal of this string substitution routine is to give vRO the same string expansion capabilities as Cloud Assembly
Cloud Templates have.  As of this writing
https://docs.vmware.com/en/vRealize-Automation/services/Using-and-Managing-Cloud-Assembly/GUID-12F0BC64-6391-4E5F-AA48-C5959024F3EB.html
Not all capabilities are implemented but a few are.  The goal is to retain as close as possible to syntax 
compatibility with Cloud Templates.

Functions implemented:
    to_lower
    to_upper
    substring
    contains(string, value) // not array
    trim

Examples
    Assuming property   "myVar" == "varValue"
                        "seven" == "07"

    Input: This ${myVar} needs to be expanded
    Output: This varValue needs to be expanded

    Input: This ${myvar + " needs"} to be expanded
    Output: This varValue needs to be expanded

    Input: This ${myvar + to_lower(" NEEDS")} to be expanded
    Output: This varValue needs to be expanded

    Input: This ${myvar == "varValue"? "varValue needs": "needs"} to be expanded
    Output: This varValue needs to be expanded

    Input: This $[myvar == "varValue"? to_upper(varValue) + " needs": "unknown needs"] to be expanded
    Output: This VARVALUE needs to be expanded

    Input: Seven ${seven > "5"? "is greater than 5": "is less than 5"}      // If both sides are numbers, do number comparison
    Output: Seven is greater than 5

    Input: Seven ${seven + "a" > "5a"? "is greater than 5": "is less than 5"}    // Note:  Force string comparison
    Output: Seven is less than 5

Tips:
    Comparison is numeric unless there is a non-digit in the comparison.  Then it performs a string comparison

    You can nest properties using a.b syntax. i.e. Get property 'a' which is a Property type.  Then lookup b in that child property."

    You can suppress variable expansion by using \${ syntax.

    Nested double quote is support ("ab""cd" results in ab"cd )

    The variables may thenselves have variable references and they will be expanded...but only to a point.  Circular loops
    are not detected.  We just stop after a couple of nested expansions.

*/

/*
Code documentation

Overall process: 
    First the string is parsed into a set of nodes.
    Then, when appropriate (var, xvar and func arguments), those nodes are broken into a set of child nodes
    This process is repeated until it is appropriate to stop (3 passes currently)
    Then the leaf nodes are collapsed into the parent nodes until the tree is one level deep. 
    Then the final node layer is joined into the resulting string.

Node Fields:
    *value - string or array of sub-objects
    *type - node type.  See below
    *pos - Position in the array.
    *op - Operator.
    function - Name of function 
    arguments - Arguments to the function

Node Types: 
    const - String literal
    var - Variable that needs to be expanded.  When expaned, turns the value into an xvar.
    xvar - Value is an array of sub-objects
    func - Function call

Node op:
    + - concatenation
    == - Compare two values for equality.  Does numeric comparison if both values are numbers.
    != - Compare two values for inequality.  Does numeric comparison if both values are numbers.
    > - Compare two values for greater than.  Does numeric comparison if both values are numbers.
    < - Compare two values for less than.  Does numeric comparison if both values are numbers.
    
*/
//System.log("Input: " + inputString);

//System.log("### First Pass");
var nodes = parseString(inputString, "", 0);
//System.log("Pass 1 results: " + JSON.stringify(ans, null, 2));

//System.log("### Second Pass");
// Expand variables and functions
nodes = expandVariables(nodes, prop1, prop2);
//System.log("Pass 2 results: " + JSON.stringify(ans, null, 2));

//System.log("### Third pass");
nodes = expandVariables(nodes, prop1, prop2);
//System.log("Pass 3 results: " + JSON.stringify(ans, null, 2));


return collapseData(nodes);


//////////////////////////////////////////////////////////////////////////
// Parsing section
//////////////////////////////////////////////////////////////////////////

// Parse a string for ${...} references.  When found, call parseVariable to process it.
function parseString(str, npos, pos) {
    var token="${";
    var endToken = '}';

    var parsed = [];
    var runstr = str;
    
    while (runstr.length > 0) {
        if (runstr.indexOf(token) == 0) { // var call
            var i = runstr.indexOf(endToken) + 1;
	        var s = runstr.substring(0, i);
	        runstr = runstr.substring(i);
	        s = s.substring(token.length);
	        s = s.substring(0, s.length - endToken.length);
    	    
    	    node = {};
	        node.op = "+";
 	        node.type = 'xvar'; // value is an array of elements
	        node.pos = "" + pos;
	        node.value = parseVariable(s, npos, pos);
    
	        parsed.push(node);
	        pos += i;
    
        } else { // literal string
	        var node = {};
            var i = runstr.indexOf(token);
	    
	    // Take all text up to ${ but that does not include \${
	    if (i > 0) {
	        if (runstr[i-1] == '\\') { // \${ syntax, remove \ and continue processing
	            var j = runstr.substring(i+1).indexOf(token);
	            i = i + j + 1;
	            if (j < 0) i = runstr.length;
	        }
	    }
	    if (i < 0) i = runstr.length;
	    	    
	    var re = new RegExp("\\\\\\" + token, "g");
	    node.value = runstr.substr(0, i).replace(re, token); // change xxx\${yyy to xxx${yyy
	    
	    node.op = "+";
 	    node.type = 'const';
	    node.pos = (npos == "")? "" + pos : npos + "." + pos;
	    parsed.push(node);
	    
	    runstr = runstr.substring(i);
	    pos += i;

        }

    }

    return parsed;

}

////////////////////////////////////
// Parse a ${...} variable contents
function parseVariable(str, npos, pos) {
    var ans = [];
    var parserChar = " ";
    
    //System.log("parseVariable: in: " + str);
    str = ltrim(str);
    str = rtrim(str);

    while (str.length > 0) {
        var qchar = null;
        if ((str[0] == "'") || (str[0] == '"')) qchar = str[0];

        var i = nextWordOrd(str, parserChar);
	    var i2 = 0;
        word = nextWord(str, i);
        str = ltrim(str.substring(i));
	    var op = "";

	    if (str.length > 0) { // Get operator
	        i2 = nextWordOrd(str, parserChar);
	        op = nextWord(str, i2);
            str = ltrim(str.substring(i2));
            if (op != "+") parserChar = " ?:";
	    }
	    var node = {};
	    node.value = word;
	    node.op = op;
	    node.pos = (npos == "")? "" + pos : npos + "." + pos;

	    if (qchar != null) {
	        node.type = 'const';
	    } else {
	        if (isNaN(word)) node.type = 'var';
	        else node.type = 'const';
	    }

	    pos += i + i2;
	    ans.push(node);
   

        //System.log('parseVariable: str="' + str + '"');
        //System.log('parseVariable: word="' + word + '"');
    }
    return ans;
}

////////////////////////////////////
// Get the starting ordinal (position) of the next word
function nextWordOrd(str, sep) {
    var ans = 0;
    //System.log('nextWordOrd: input "' + str + '", sep="' + sep + '"');

    if ((str[0] == "'") || (str[0] == '"')) {
	    ans = str.substring(1).indexOf(str[0]);

	    if (ans < 0) ans = str.length; // Missing matching quote, default to full string.
	    else ans++; // search above starts on first char, so add 1 more to str index.
	
	    while ((ans < str.length-1) && (str[ans+1] == str[0])) { // double quotes
	        ans += 2;
	        j = str.substring(ans).indexOf(str[0]);
	        ans = ans + j;
	        if (j < 0) ans = str.length; // Missing matching quote, default to full string.
	    }
	
	    ans++; // move to first char of next word


    } else if (isFunction(str)) {
    	var qu = null;
    	ans = 1;
    	// Find a ")" that is not inside quotes.
    	while ((ans < str.length) && (str[ans] != ')') && (qu == null)) {

    	    if ((str[ans] == "'") || (str[ans] == '"')) {
    	    	if (qu == null) qu = str[i];
    	    	else if (str[ans] == qu) qu = null;
    	    }
    	    ans++;    	    
    	}
    	ans++;
    	
    } else {
    	ans = -1;
    	for (var i=0; i < sep.length; i++) {
    	    var x = str.indexOf(sep[i]);
    	    if (( x > 0) && ((x < ans) || (ans == -1))) ans = x;
    	}
	    if (ans < 0) { // last word
	        ans = str.length;
	    }
    }

    //System.log("nextWordOrd: Returning: " + ans);
    return ans;
}

////////////////////////////////////
function ltrim (str) {
    while ((str.length > 0) && ((str[0] == ' ') || (str[0] == '\t'))) str = str.substring(1);
    return str;
}

////////////////////////////////////
function rtrim (str) {
    while ((str.length > 0) && ((str[str.length-1] == ' ') || (str[str.length-1] == '\t'))) str = str.substring(0, str.length-1);
    return str;
}

////////////////////////////////////
// Extract the next word 
// ord is the start of the next word.
function nextWord(str, ord) {
    var word = str.substring(0, ord);

    if ((word[0] == "'") || (word[0] == '"')) {
	    var qchar=word[0];
	    word = word.substring(1);
	    word = word.substring(0, word.length-1);
	    if (qchar == "'") word = word.replace(/''/g, "'");
	    else word = word.replace(/""/g, '"');
    }
    return word;
}

////////////////////////////////////
// Take a variable and expand it.
function expandVariables(nodes, prop1, prop2) {

    for (var i=0; i < nodes.length; i++) {
    	if (nodes[i].type == 'const') {
    	    // do nothing
	    } else if (nodes[i].type == 'var') {
	
	        if (isFunction(nodes[i].value)) { // Function
		        //System.log('ev: function nodes is ' + nodes[i].value);
		        nodes[i].type = 'func';
		        nodes[i].arguments = getFunctionArguments(nodes[i].value, nodes[i].pos);
		        var j = nodes[i].value.indexOf('(');
		        nodes[i].function = nodes[i].value.substring(0, j);
		
	        } else { // variable
		        var p = getPropertyValue(prop1, prop2, nodes[i].value);
		        if (p == null) {
		            System.log("Error: Property " + nodes[i].value + " not found.");
		            // TODO Improve
		            nodes[i].value = "";
		            nodes[i].type = "const";
		        } else {
		            nodes[i].value = parseString(p, nodes[i].pos, 0);
	                nodes[i].type = 'xvar';
	            }
		    //System.log("ev: prop " + nodes[i].value + " = " + p);
	        }
	    } else if (nodes[i].type == 'xvar') {
	        //System.log("Expanding " + JSON.stringify(nodes[i].value, null, 2));
	        nodes[i].value = expandVariables(nodes[i].value, prop1, prop2);
	    
	    } else if (nodes[i].type == 'func') {
	        nodes[i].arguments = expandVariables(nodes[i].arguments, prop1, prop2);
	
	    } else { // nested array
	        System.log(JSON.stringify(nodes[i], null, 2));
	        System.log("**** Nested array not allowed***");
	    }
    }

    return nodes;
}

////////////////////////////////////
function getPropertyValue(prop1, prop2, propName) {
    var ans = "";
    
    var props = propName.split(".");
    if (prop1) {
        ans = prop1;
        for (var i=0; i < props.length; i++) {
            ans = ans[props[i]];
            if (ans == null) break;
        }
    }
    if (prop2 && (ans == null)) {
        ans = prop2;
        for (var i=0; i < props.length; i++) {
            ans = ans[props[i]];
            if (ans == null) break;
        }
    }
		
    //System.log("getPropertyValue: propName is " + propName + ".  Returning " + ans);
    return ans;
}

////////////////////////////////////
// Extract arguments to a function.
function getFunctionArguments(str, pos) {
    //System.log("L4: getFunctionArgs");
    var ans = [];
    str = rtrim(str);
    var i = str.indexOf("(");
    str = ltrim(str.substring(i+1));
    
    str = str.substring(0, str.length-1);
    //System.log("l4 fcn: args: '" + str + "'");
    
    while (str.length > 0) {
        i = nextWordOrd(str, ",");
        var qchar = null;
    	if ((str[0] == "'") || (str[0] == '"')) qchar=str[0];
	
        var word = nextWord(str, i);
        
        var node = {};
	node.value = word;
	node.op = ",";
	node.pos = pos;
	if (qchar != null) node.type = 'const';
	else node.type = 'var';
	ans.push(node);
	
        str = ltrim(str.substring(i+1)); 
        //System.log("l4: Remaining: " + str);
    }  
    return ans;
}

//////////////////////////////////////////////////////////////////////////
// Reconstitution section
//////////////////////////////////////////////////////////////////////////


////////////////////////////////////
function collapseData(nodes) {
    var ans = "";

    // Collapse sub-data structures to constants
    for (var i = 0; i < nodes.length; i++) {
        var nodei = nodes[i];
        
        if (nodei.type == "const") {
            // do nothing
        } else if (nodei.type == "xvar") {
            //System.log("collapseData: xvar: " + JSON.stringify(nodei, null, 2));  
            nodei.value = collapseData(nodei.value);
            nodei.type = 'const';
            //System.log("collapseData: result is " + JSON.stringify(nodei, null, 2));
            
        } else if (nodei.type == "func") {
            //System.log("collapseData: func: " + JSON.stringify(nodei, null, 2));  
            
            for (var j=0; j < nodei.arguments.length; j++) {

            	if (nodei.arguments[j].type == "const") {
            	    // Do nothing
            	} else if (nodei.arguments[j].type == "xvar") {
            	    nodei.arguments[j].value = collapseData(nodei.arguments[j].value);
            	    nodei.arguments[j].type = 'const';
            	}
            }
            nodei.value = callFunction(nodei);
            nodei.type = 'const';
            delete nodei.arguments;
            delete nodei.function;
            //System.log("collapseData: result is " + JSON.stringify(nodei, null, 2));
        }
    }
    
    // Process into a string
    for (var i = 0; i < nodes.length; i++) {
        var nodei = nodes[i];
                     
        if ((nodei.op == '+')  || (nodei.op == "")) {
            ans += nodei.value;
            
        } else if (nodei.op == '?') {
            //System.log("Current value: " + ans);
            //System.log("Full tree " + i + ": " + JSON.stringify(nodes, null, 2));
            
            var va;
            if ((nodes[i+1]) && (nodes[i+1].op == ":")) {
                va = evalExpression(nodes[i-1], nodei, nodes[i+1], nodes[i+2]);
                i += 2;
            } else {
                va = evalExpression(nodes[i-1], nodei, nodes[i+1], null);
                i++;
            }
            
            if (va) {
                if (va.op.length <= 1) {
                    ans += va.value;
                } else i--;
            }
            
            i++;
        } else if ((nodei.op == "==") || (nodei.op == "!=") || (nodei.op == ">") || (nodei.op == "<")) {
            // DO Nothing
        } else {
            // TODO: Improve
            System.log("Illegal operator " + nodei.op + " at " + nodei.pos);
        }
    }
    
    return ans;
}
////////////////////////////////////

function evalExpression(node1, node2, node3, node4) {
    var ans;
    
    if (node1.op == "==") {

	var isEqual = false;
	var isNumber = (! isNaN(node1.value));
	if (isNumber) isNumber = (! isNaN(node2.value));
	
	if (isNumber) {
	    isEqual = (parseInt(node1.value) == parseInt(node2.value));
	} else {
	    isEqual = (("" + node1.value) == ("" + node2.value));
	    //System.log("evalExpression: " + node1.value + " == " + node2.value + " is " + isEqual);
	}
	
        if (isEqual) {
            ans = node3;
            //System.log("evalExpression: Ans is: " + JSON.stringify(ans, null, 2));
        } else {
            ans = node4;
	}
    } else if (node1.op == "!=") {

	var isNotEqual = false;
	var isNumber = (! isNaN(node1.value));
	if (isNumber) isNumber = (! isNaN(node2.value));
	
	if (isNumber) {
	    isNotEqual = (parseInt(node1.value) != parseInt(node2.value));
	} else {
	    isNotEqual = (("" + node1.value) != ("" + node2.value));
	    //System.log("evalExpression: " + node1.value + " != " + node2.value + " is " + isNotEqual);
	}
	
        if (isNotEqual) {
            ans = node3;
            //System.log("evalExpression: Ans is: " + JSON.stringify(ans, null, 2));
        } else {
            ans = node4;
	}
    } else if (node1.op == ">") {

	var isGreater = false;
	var isNumber = (! isNaN(node1.value));
	if (isNumber) isNumber = (! isNaN(node2.value));
	
	if (isNumber) {
	    isGreater = (parseInt(node1.value) > parseInt(node2.value));
	} else {
	    isGreater = (("" + node1.value) > ("" + node2.value));
	    //System.log("evalExpression: " + node1.value + " > " + node2.value + " is " + isGreater);
	}
	
        if (isGreater) {
            ans = node3;
            //System.log("evalExpression: Ans is: " + JSON.stringify(ans, null, 2));
        } else {
            ans = node4;
	}
    } else if (node1.op == "<") {

	var isLessThan = false;
	var isNumber = (! isNaN(node1.value));
	if (isNumber) isNumber = (! isNaN(node2.value));
	
	if (isNumber) {
	    isLessThan = (parseInt(node1.value) < parseInt(node2.value));
	} else {
	    isLessThan = (("" + node1.value) < ("" + node2.value));
	    //System.log("evalExpression: " + node1.value + " < " + node2.value + " is " + isLessThan);
	}
	
        if (isLessThan) {
            ans = node3;
            //System.log("evalExpression: Ans is: " + JSON.stringify(ans, null, 2));
        } else {
            ans = node4;
	}
    } else {
        System.log("Illegal conditional operator " + node1.op + " at " + nodei.pos);
    }// TODO: else throw exception - illegal comparison operator
    
    return ans;
}

////////////////////////////////////
function isFunction(str) {
    if (str.indexOf("to_lower") == 0) {
	    return true;
    } else if (str.indexOf("to_upper") == 0) {
	    return true;
    } else if (str.indexOf("contains") == 0) {
	    return true;
    } else if (str.indexOf("substr") == 0) {
	    return true;
    } else if (str.indexOf("trim") == 0) {
	    return true;
    }
    return false;
}

////////////////////////////////////
function callFunction(nodei) {
    if (nodei.function == 'to_lower') {
        return fcn_to_lower(nodei);
    } else if (nodei.function == 'to_upper') {
        return fcn_to_upper(nodei);
    } else if (nodei.function == 'contains') {
        return fcn_contains(nodei);
    } else if (nodei.function == 'substr') {
        return fcn_substr(nodei);
    } else if (nodei.function == 'trim') {
        return fcn_trim(nodei);
    }
}

////////////////////////////////////
function fcn_to_lower(nodei) {
    //System.log("fcn:to_lower: " + JSON.stringify(nodei, null, 2));
    //System.log("fcn:to_lower: value is " + nodei.arguments[0].value);
    return nodei.arguments[0].value.toLowerCase();
}

////////////////////////////////////
function fcn_to_upper(nodei) {
    return nodei.arguments[0].value.toUpperCase();
}

////////////////////////////////////
function fcn_contains(nodei) {
    return (nodei.arguments[0].value.indexOf(nodei.arguments[1].value) >= 0);
}

////////////////////////////////////
function fcn_substring(nodei) {
    return nodei.arguments[0].value.substring(nodei.arguments[1].value, nodei.arguments[2].value);
}

////////////////////////////////////
function fcn_trim(nodei) {
    return ltrim(rtrim(nodei.arguments[0].value));
}
]]></script>
</dunes-script-module>